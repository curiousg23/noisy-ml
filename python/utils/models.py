"""Functions to generate oracle models--the true data-generating functions.
"""
import numpy as np
import pandas as pd
from scipy import stats

# Default ranges to draw observations from when getting a sample of 10
# correlated U(0,1) random variables.
DEFAULT_SCALES = {
    1: [-430, 250],
    2: [-136, 446],
    3: [-48, -10],
    4: [-600, 860],
    5: [-300, 60],
    6: [272, 744],
    7: [-251, 1000],
    8: [-30, 26],
    9: [0.16, 2],
    10: [0.21, 0.3],
}


def generate_rvs(D = 10, corr_seed_bounds = [-0.5, 0.5], N = 500,
    scales = DEFAULT_SCALES):
    """Generate U(0,1) random variables with correlation.
    
    The function works by generating N observations from a D dimensional MVN
    with correlation matrix. The matrix is generated by sampling from the
    corr_seed_bounds until the matrix is filled, then multiplying it by its
    transpose.
    
    Parameters
    ----------
    D: integer
        The number of random variables to generate.
    corr_seed_bounds: length 2 list of reals in [0,1]
        The bounds to seed the correlation matrix with.
    N: integer
        The number of observations to generate for each random variable.
    scales: dictionary, with keys 1-D, values are length 2 lists of reals.
        The [low, high] scale for each random variable.
        
    Returns
    -------
    NxD matrix
        A matrix where each column is a collection of N observations for
        one of the random variables.
    """
    # Based on rough empirical simulation, the correlation should not exceed 50%
    # in general.
    corrmat = np.ones((D, D))
    corrs = np.random.uniform(corr_seed_bounds[0], corr_seed_bounds[1], 45)
    ctr = 0
    for i in range(10):
        for j in range(i+1, D):
            corrmat[i, j] = corrs[ctr]
            ctr += 1
    for i in range(D):
        for j in range(i+1, D):
            corrmat[j, i] = corrmat[i, j]
    covmat = corrmat * corrmat.T
    rvs = stats.multivariate_normal(mean=np.zeros(D), cov=covmat,
        allow_singular=False).rvs(size = N)
    uniform_observations = stats.norm.cdf(rvs)

    # Scale the observations:
    for i in scales:
        idx = i - 1
        uniform_observations[:, idx] = scales[i][0] + (
            scales[i][1] - scales[i][0]) * uniform_observations[:, idx]
        
    return uniform_observations


def simulate_univariate_ols(N = 500, X = None, a = 5.01, b = -7.047):
    """Draw N observations from a univariate linear relationship.

    We have default parameters so f(X) = 5.01 - 7.047 * X. If X is not provided,
    we draw N observations of X from U(-500, 500) and apply f.

    Parameters
    ----------
    N: nonnegative integer
        The number of observations to draw. Ignored if X is provided.
    X: vector of reals
        Observations of the independent variable. If not provided, we draw these
        observations from U(-500, 500).
    a: real
        The intercept of the linear regression. Defaults to 5.01.
    b: real
        The slope of the linear regression. Defaults to -7.047.

    Returns
    -------
    dataframe
        A pandas dataframe consisting of columns ['X1', 'fX'].
    """
    if X is None:
        X = np.random.uniform(-500, 500, N)
    fX = 5.01 - 7.047 * X
    data = np.vstack([X, fX]).T
    df = pd.DataFrame(data, columns = ['X1', 'fX'])
    return df


def simulate_10var_linear(N = 500, X = None):
    """Draw N observations from a 10-D multivariate linear relationship.

    If X is not provided, the observations will be drawn using the generate_rvs
    function, with its DEFAULT_SCALES.

    The model: f(X) = 89.237 + 34.21 * X1 - 55.36 * X2 + 22.59 * X3 + 69.9 * X4
    - 87.96 * X5 + 7.7 * X6 + 3.77 * X7 + 6.71 * X8 - 1.73 * X9 + 5.53 * X10.

    Parameters
    ----------
    N: nonnegative integer
        The number of observations to draw. Ignored if X is provided.
    X: matrix of reals
        Observations of the 10 independent variables. Each column is a random
        variable's set of observations. If not provided, we draw these
        observations from generate_rvs, with its DEFAULT_SCALES.
    
    Returns
    -------
    dataframe
        A pandas dataframe consisting of ['X1',...,'X10','fX'].
    """
    if X is None:
        observations = generate_rvs(D = 10, N = N)
    else:
        observations = X
    fX = (89.237 + 34.21 * observations[:, 0] - 55.36 * observations[:, 1] +
        22.59 * observations[:, 2] + 69.9 * observations[:, 3] -
        87.96 * observations[:, 4] + 7.7 * observations[:, 5] +
        3.77 *observations[:, 6] + 6.71 * observations[:, 7] -
        1.73 * observations[:, 8] + 5.53 * observations[:, 9])
    fX = fX.reshape((fX.shape[0], 1))
    data = np.hstack([observations, fX])
    columns = ['X{}'.format(i) for i in range(1, 11)] + ['fX']
    df = pd.DataFrame(data, columns=columns)
    return df
